
server:
  port: 19000

spring:
  application:
    name: stats-service
  profiles:
    active: dev
  # MySQL-Server & JPA 설정
  # Quarkus 기반 Keycloak-Server 을 이용한 인증 처리
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/inkcloud
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
          # jwk-set-uri: http://localhost:8080/realms/inkcloud/protocol/openid-connect/certs
  
  kafka:
    bootstrap-servers: broker:9092
    consumer:
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer


aws:
  dynamodb:
    region: ap-northeast-2
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}
    
# 로깅 설정
logging:  
  level:
    root: info
    org.springframework.security: DEBUG
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace
    com.mzc.review_service: INFO

# Eureka-Server 에 자가 등록 설정
eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.cloud.client.hostname}:${server.port}
    prefer-ip-address: true
  client:  
    register-with-eureka: true  
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
